Linear probing is a collision handling technique in hashing.
Linear probing says that whenever a collision occurs, search for the immediate next position

CODE:
//{ Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class gfg
{
    
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        
        while(t-- >0)
        {
            int hash_size = sc.nextInt();
            int array_size = sc.nextInt();
            
            int arr[] = new int[array_size];
            for(int i = 0; i < array_size; i++)
             arr[i] = sc.nextInt();
             
            // int hash_table[] = new int[hash_size];
            // for(int i = 0; i < hash_size; i++)
            //     hash_table[i] = -1;
            Solution obj = new Solution();
            int hash_table[] = obj.linearProbing(hash_size, arr, array_size);
            
            for(int i = 0; i <hash_size; i++)
                System.out.print(hash_table[i] + " ");
             
            System.out.println();
             
        }
    }
    
}
// } Driver Code Ends


class Solution{
    //Function to fill the array elements into a hash table 
    //using Linear Probing to handle collisions.
    int[] linearProbing(int hash_size, int arr[], int sizeOfArray)
    {
        //Your code here
        int hash_table[] = new int[hash_size];
            
            //storing -1 at all indexes in the hash table.
            for(int j = 0; j < hash_size; j++)
                 hash_table[j] = -1;
            
            //iterating over the array. 
            for(int i=0;i<sizeOfArray;i++)
            {
                //if the value of hash table at index (arr[i]%hashSize) is -1 
                //which means empty then, we insert arr[i] at that place.
                if(hash_table[arr[i]%hash_size]==-1)
                {
                    hash_table[arr[i]%hash_size]=arr[i];
                }
                //else we move linearly from the filled position 
                //to find an index with -1 in hash table.
                else
                {
                    int counter=0;
                    int k=(arr[i])%hash_size; //storing current hash value into k
                    int flag=0;
                    //using a loop which runs until we find an index with -1
                    //in hash table which means empty.
                    while(counter<hash_size && hash_table[k]!=-1)
                    {
                        if(hash_table[k]==arr[i])
                        {
                            flag=1;
                            break;
                        }
                         k=(k+1) % hash_size;
                         counter++;
                    }
                    if(flag==1)
                        continue;
                    //if we find a position where arr[i] can be inserted 
                    //then we insert the element.
                    if(counter<hash_size)
                    hash_table[k]=arr[i];
                }
            }
            //returning the hash table.
            return hash_table;
    }
    
}
