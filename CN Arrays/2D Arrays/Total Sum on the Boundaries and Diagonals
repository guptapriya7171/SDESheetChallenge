For a given two-dimensional square matrix of size (N x N).
Find the total sum of elements on both the diagonals and at all the four boundaries.

Sample input 1:
1
3
1 2 3
4 5 6
7 8 9
Sample Output 1:
45

CODE:
package array2d;
import java.util.Scanner;
public class totalSumBoundriesDiagonals {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
 
		Scanner sc = new Scanner(System.in);
		 int testcases = 1;
		 int times = sc.nextInt();
		
		 while(testcases <= times) {
			 
			 int n = sc.nextInt();
			
			 
			 int[][] arr = new int[n][n];
			 
			 for(int i=0;i<n;i++) {
			   for(int j=0;j<n;j++) {
			      arr[i][j]= sc.nextInt();
			}
		}
			 
			 returnSum(arr, n);
			 testcases++;
		 }
	}
	public static void returnSum(int arr[][], int n) {
		
         int total = 0;
         if(n==0 ){
             System.out.println(0);

         }else {
		 for(int i=0;i<n;i++) {
				for(int j=0;j<n;j++) {
					
					//Diagonal 
					 if (i == j || (i + j) == n- 1) {
						 total += arr[i][j];
	                    }

	                    //Boundary
	                    else if (i == 0 || j == 0 || i == n - 1|| j == n - 1) {
	                    	total += arr[i][j];
	                    }
				}
			}
		 System.out.println(total);
	}
	}
}

