Sol 1: Brute Force
import java.util.*;
class TUF {
    static int[][] rotate(int[][] matrix) {
        int n = matrix.length;
        int rotated[][] = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rotated[j][n - i - 1] = matrix[i][j];
            }
        }
        return rotated;
    }

    public static void main(String args[]) {
        int arr[][] =  {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        int rotated[][] = rotate(arr);
        System.out.println("Rotated Image");
        for (int i = 0; i < rotated.length; i++) {
            for (int j = 0; j < rotated.length; j++) {
                System.out.print(rotated[i][j] + " ");
            }
            System.out.println();
        }

    }
}

Time Complexity: O(N*N) to linearly iterate and put it into some other matrix.
Space Complexity: O(N*N) to copy it into some other matrix.
    [0,2]=[0,0]     [0,1]=[1,0]    [0,2]=[2,0]  
    [1,2]=[0,1]     [1,1]=[1,1]    [1,2]=[2,1]  
    [2,2]=[0,2]     [2,1]=[1,2]    [2,2]=[2,2]  

      1 2 3        7  4  1
      4 5 6        8  5  2
      7 8 9        9  6  3
      
 Solution 2: Optimized approach
 class Solution {
    public void rotate(int[][] matrix) {
        
        int n = matrix.length;
        
       //transpose
        
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
               matrix[j][i] = temp; 
            }
        }
        //  1 2 3           1  4  7          7  4  1
        //  4 5 6   ===>    2  5  8     ==>  8  5  2
        //  7 8 9           3  6  9          9  6  3      
        
       //reverse column
        for(int i=0;i<n;i++){
            for(int j=0;j<n/2;j++){
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][n-1-j];
                matrix[i][n-1-j] = temp; 
            }
        }
    }
}

Time Complexity: O(N*N) + O(N*N).One O(N*N) for transposing the matrix and the other for reversing the matrix.

Space Complexity: O(1).
