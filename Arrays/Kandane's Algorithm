1. Brute Force Code
class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;
        
        for(int i =0;i<nums.length;i++){
             
            for(int j=i;j<nums.length;j++){
               int sum = 0;
                for(int k=i;k<=j;k++){
                    sum = sum + nums[k];
                }
                max = Math.max(sum, max);
            }
        }
        return max;
    }
}
TC : O(n^3) SC:O(1)

2. Second Optimize
class Solution {
    public int maxSubArray(int[] nums) {
        
        int max = Integer.MIN_VALUE;
        
        for(int i =0;i<nums.length;i++){
             int sum = 0;
            for(int j=i;j<nums.length;j++){
               sum = sum + nums[j];
               max = Math.max(sum, max);
            }
        }
        return max;
    }
}
TC : O(n^2) SC:O(1)

3. Kandane's (Optimised Approach)
class Solution {
    public int maxSubArray(int[] nums) {
        
        int bestsum = Integer.MIN_VALUE;
        int currentsum =0;
        
        for(int i =0;i<nums.length;i++){
            currentsum = Math.max(nums[i], currentsum + nums[i]);
            bestsum = Math.max(currentsum,bestsum); 
        }
        return bestsum;
    }
}
TC : O(n) SC:O(1)
