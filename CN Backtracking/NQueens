CODE:
package backtracking;

import java.util.Scanner;

public class NQueens {

	  public static void printSolution(int[][] board) {
	        for (int i = 0; i < board.length; i++) {
	            for (int j = 0; j < board.length; j++) {
	                System.out.print(board[i][j] + " ");
	            }
	            System.out.println();
	        }
	        System.out.println();
	    }

	    public static boolean isSafe(int[][] board, int row, int col, int n) {
	        for (int i = 0; i < n; i++) {
	            if (board[row][i] == 1) return false; // first checked all the aligned elements value in the same row 
	            if (board[i][col] == 1) return false; // first checked all the aligned elements value in the same column
	        }
	        for (int i = 1; i < n; i++) {
	            if (row + i < n && col + i < n && board[row + i][col + i] == 1) return false; // Downward Diagonal 
	            if (row - i >= 0 && col - i >= 0 && board[row - i][col - i] == 1) return false; // UpperBack Diagonal
	            if (row - i >= 0 && col + i < n && board[row - i][col + i] == 1) return false; //UpperForward Diagonal
	            if (row + i < n && col - i >= 0 && board[row + i][col - i] == 1) return false; // DownBackward Diagonal
	        }
	        return true;
	    }

	    public static boolean placeQueens(int n, int row, int[][] board) {
	        if (row == n) {
	            return true;
	        }
	        for (int j = 0; j < n; j++) {
	            if (isSafe(board, row, j, n)) {
	                board[row][j] = 1;
	                if (placeQueens(n, row + 1, board)) {
	                    printSolution(board);
	                }
	                board[row][j] = 0;
	            }
	        }
	        return false;
	    }
	    public static void placeNQueens(int n) {
	        placeQueens(n, 0, new int[n][n]);
	    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
         Scanner Inp = new Scanner(System.in);
         System.out.print("Enter the size of double matrix:");
         int size  = Inp.nextInt();
         placeNQueens(size);
	}

}
Enter the size of double matrix: 
5
1 0 0 0 0 
0 0 1 0 0 
0 0 0 0 1 
0 1 0 0 0 
0 0 0 1 0 

1 0 0 0 0 
0 0 0 1 0 
0 1 0 0 0 
0 0 0 0 1 
0 0 1 0 0 

0 1 0 0 0 
0 0 0 1 0 
1 0 0 0 0 
0 0 1 0 0 
0 0 0 0 1 

0 1 0 0 0 
0 0 0 0 1 
0 0 1 0 0 
1 0 0 0 0 
0 0 0 1 0 

0 0 1 0 0 
1 0 0 0 0 
0 0 0 1 0 
0 1 0 0 0 
0 0 0 0 1 

0 0 1 0 0 
0 0 0 0 1 
0 1 0 0 0 
0 0 0 1 0 
1 0 0 0 0 

0 0 0 1 0 
1 0 0 0 0 
0 0 1 0 0 
0 0 0 0 1 
0 1 0 0 0 

0 0 0 1 0 
0 1 0 0 0 
0 0 0 0 1 
0 0 1 0 0 
1 0 0 0 0 

0 0 0 0 1 
0 1 0 0 0 
0 0 0 1 0 
1 0 0 0 0 
0 0 1 0 0 

0 0 0 0 1 
0 0 1 0 0 
1 0 0 0 0 
0 0 0 1 0 
0 1 0 0 0 
