CODE:
package Stacks;

  
public class StackUsingArray {
	 
	private int data[];
	private int topIndex; //Index of the top most element of the stack
	
	 public StackUsingArray() {
		 data = new int[2];
		 topIndex = -1;
	 }
	
	 public int size() {
		 return topIndex +1;
	 }
	 public boolean isEmpty() {
//		 if(topIndex == -1) {
//			 return true;
//		 }else {
//			 return false;
//		 }
		 return topIndex  == -1;
	 }
	 public void push(int elem)  {
	//If stack is full
		 if(topIndex == data.length -1) {
			 //Throw an exception
//			 StackFullException e = new StackFullException();
//			 throw e;
//			 throw new StackFullException();
			 doubleCapacity();
		 }
		data[++topIndex]   = elem;
	 }
	 private void doubleCapacity() {
		// TODO Auto-generated method stub
		int temp[] = data;
		data = new int[2 * temp.length];
		for(int i=0;i<temp.length;i++) {
			data[i] = temp[i];
		}
	}

	public int top() throws StackEmptyException{
		 if(topIndex == -1) {
			 //Throw StackEmptyException
			 throw new StackEmptyException();
		 }
		 return data[topIndex];	
	 }
	public int pop() throws StackEmptyException{

        if(topIndex==-1){
            throw new StackEmptyException();
        }
        int temp = data[topIndex];
        topIndex--;
        return temp;
    }

}
