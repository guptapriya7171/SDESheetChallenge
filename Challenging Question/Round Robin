#Round Robin is a CPU scheduling algorithm where each process is assigned a fixed time (Quantum) in a cyclic manner.

CODE:
import java.util.ArrayList;

public class Solution {

public static ArrayList<Integer> roundRobin(ArrayList<Integer> process, int n, int quantum) {

// List of remaining burst time of all processes.

ArrayList < Integer > rem = new ArrayList < Integer > (n);

for (int i = 0; i < n; i++)

{

rem.add(process.get(i));

}

ArrayList < Integer > waiting = new ArrayList < Integer > (n);

for(int i=0;i<n;i++){

waiting.add(0);

}

// Current time.

int t = 0;

// Implementing round robin.

while (true)

{

boolean done = true;

// Traversing all processes one by one until all executed.

for (int i = 0; i < n; i++)

{

// We need to retake this process in next iteration.

if (rem.get(i) > 0)

{

// Pending process alert.

done = false;

if (rem.get(i) > quantum)

{

// Update t.

t += quantum;

// Decrease remaining time.

rem.set(i, rem.get(i) - quantum);

}

// Last cycle of this process.

else

{

// Update t.

t = t + rem.get(i);

// Waiting time is current time minus time used by this process.

waiting.set(i, t - process.get(i));

rem.set(i, 0);

}

}

}

// If all processes are done.

if (done == true)

{

break;

}

}

return waiting;
}
}
