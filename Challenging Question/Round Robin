#Round Robin is a CPU scheduling algorithm where each process is assigned a fixed time (Quantum) in a cyclic manner.

CODE:
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution {

	public static ArrayList<Integer> roundRobin(ArrayList<Integer> process, int n, int quantum) {
		ArrayList<Integer> temp = new ArrayList<Integer>(n);
        ArrayList<Integer> result = new ArrayList<Integer>(n);
        int sum = 0;
        for(int i=0;i<n;i++){
            temp.add(process.get(i));
            sum += temp.get(i);
        }
        for(int j=0;j<n;j++){
            while(sum != 0){
              // k as the index of all operation
               int series = 0; 
               //K = from left to right
                for(int k=0;k<n;k++){
                   if(temp.get(k) >= 2){
                      quantum = 2;
                       series+=2;
                   }else if(temp.get(k) == 1){
                      quantum = 1;
                       series+=1; 
                   }
                   else if(temp.get(k) ==0){
                       break;
                   }
                   temp.set(k, temp.get(k) - quantum);
                    sum = sum - temp.get(k);
                    if(temp.get(k) == 0){
                       result.add(series - process.get(k));
                    }
                }
                
               //K = form right to left
                 for(int k=n;k>0;k--){
                   if(temp.get(k) >= 2){
                      quantum = 2;
                       series+=2;
                   }else if(temp.get(k) == 1){
                      quantum = 1;
                        series+=1;
                   }
                   else if(temp.get(k) ==0){
                       break;
                   }
                  temp.set(k, temp.get(k) - quantum);
                      sum = sum - temp.get(k);
                      if(temp.get(k) == 0){
                       result.add(series - process.get(k));
                      }
                 }
            }
        }
        return result;
	}
	
}
