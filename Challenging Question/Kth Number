Q. Arrange an array in a lexiographical manner and return the kth element from the array.
Sample Input 1 :
2
13 2
5 5
Sample Output 1 :
10
5

Explanation For Sample Input 1 :
For case 1:
    For N = 13, array 'A' is [1, 2, 3, 4, ….., 12, 13]. After lexicographical sorting, array 'A' becomes [1, 10, 11, 12, 13, 2, 3, …. 8, 9] which has number 10 at its second position.

For Case 2:
    Before and After sorting, array 'A' remains the same which is [1, 2, 3, 4, 5]. Number 5 appears at 5th position.
    
    
CODE:
/*

Time Complexity: O(D ^ 2)

Space Complexity: O(1)

where,

D = log10(N).

N is provided in input data, denoting the range of array elements.

*/

public class Solution {

// Function to calculate count of numbers starting with 'num1'.

public static int calcSteps(long N, long num1, long num2)

{
int cnt = 0;
while(num1 <= N)
{
// Take the count until 'N' or 'num2' is reached.
cnt += Math.min(N + 1, num2) - num1;
num1 *= 10;
num2 *= 10;
}

return cnt;

}

public static int findKth(int N, int K) {

// Initialize answer.

int ans = 1;

K--;

while(K != 0)

{
// Calculate the count of numbers starting with 'ans'.
int steps = calcSteps(N, ans, ans + 1);

// If steps is less than or equal to 'K', digit is changed.

if(steps <= K)
{
K -= steps;
ans += 1;
}
// Else, digit is fixed and move to next position.
else
{
ans *= 10;
K -= 1;
}

}

return ans;

}

}
