class Solution {
    
    public String longestPalindrome(String s) {
   
     int n = s.length();
     int max_len =1;
     int st=0, ed=0; 
    
        if(n <=1){
            return s;
        }
   
    //Odd Length
    for(int i=0;i<n-1;i++){
        int l=i, r=i;
        while(l>=0 && r<n){
            if(s.charAt(l) == s.charAt(r)){
             l--;r++;
            }else{
                break;
            }
        }
        int len = r-l-1;
        if(len > max_len){
          max_len=len;
          st = l+1; ed = r-1;
        }
    }
        
     //Even Length
    for(int i=0;i<n-1;i++){
        int l=i, r=i+1;
        while(l>=0 && r<n){
            if(s.charAt(l) == s.charAt(r)){
             l--;r++;
            }else{
                break;
            }
        }
        int len = r-l-1;
        if(len > max_len){
          max_len = len;
          st = l+1; ed = r-1;
        }
    }
        
    return s.substring(st, ed+1);
}
}


TC: O(n^2) SC: O(1)
