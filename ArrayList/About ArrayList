
ArrayList in Java is used to store dynamically sized collection of elements. Contrary to Arrays that are fixed in size, 
an ArrayList grows its size automatically when new elements are added to it.
ArrayList is part of Java’s collection framework and implements Java’s List interface.


Following are few key points to note about ArrayList in Java -

An ArrayList is a re-sizable array, also called a dynamic array. 
It grows its size to accommodate new elements and shrinks the size when the elements are removed.
ArrayList internally uses an array to store the elements. Just like arrays, It allows you to retrieve the elements by their index.
Java ArrayList allows duplicate and null values.
Java ArrayList is an ordered collection. It maintains the insertion order of the elements.
You cannot create an ArrayList of primitive types like int, char etc. 
You need to use boxed types like Integer, Character, Boolean etc.
Java ArrayList is not synchronized. 
If multiple threads try to modify an ArrayList at the same time, then the final outcome will be non-deterministic. 
You must explicitly synchronize access to an ArrayList if multiple threads are gonna modify it.

Creating an ArrayList and adding new elements to it
This example shows:
How to create an ArrayList using the ArrayList() constructor.
Add new elements to an ArrayList using the add() method.
import java.util.ArrayList;
import java.util.List;

public class CreateArrayListExample {

    public static void main(String[] args) {
        // Creating an ArrayList of String
        List<String> animals = new ArrayList<>();

        // Adding new elements to the ArrayList
        animals.add("Lion");
        animals.add("Tiger");
        animals.add("Cat");
        animals.add("Dog");

        System.out.println(animals);

        // Adding an element at a particular index in an ArrayList
        animals.add(2, "Elephant");

        System.out.println(animals);

    }
}
# Output
[Lion, Tiger, Cat, Dog]
[Lion, Tiger, Elephant, Cat, Dog]


Methods:
isEmpty, size, get,set, remove, removeAll, removeif, forEach, iterator, iterator & forEachRemaining() method, listIterator, contains, indexOf, lastIndexOf
