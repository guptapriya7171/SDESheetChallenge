OOPS
Object oriented programming is super helpful for creating a larger and complex software.
It has several entities that pass on data and make the required automation.
Following are the basic concepts of object oriented programming.
Class, Object, Method, Inheritance, Encapsulation, Polymorphism,Data Abstraction etc. 

Object-Oriented Programming(OOP), is all about creating “objects”. An object is a group of interrelated variables and functions. 
These variables are often referred to as properties of the object and functions are referred to as the behavior of the objects.
These objects provide a better and clear structure for the program.
For example, a car can be an object. 
If we consider the car as an object then its properties would be – its color, its model, its price, its brand, etc. 
And its behavior/function would be acceleration, slowing down, gear change.

1. Encapsulation: Object-Oriented Programming focuses on four basic concepts i.e. abstraction, encapsulation, inheritance, and polymorphism.
   Encapsulation is known as bundling of objects and variables. 
   We can provide the accessibility using different access modifiers such as public, private, default and protected. 
   So encapsulation can be easily implemented using private access modifiers.
   
2. Access Modifiers:
   When we create a class we provide an access modifiers. 
   The default access modifiers specifies means no access modifiers and it's scope remains within the package.
   The package is the collections of classes and interfaces. It can be used to manage or organize our projects.
   Package even denote the folder path. 
   Following are the scopes of access modifiers with their respective scopes:
   private: Within the class
   public: Anywhere
   default: Within the package
   protected: Within the package and child classes of other packages.
 
 
3. this keyword: It is used to pass the value of the keywords internally or the values of the properties.

4. final keyword: A final keyword can be used with variable, method and class. 
A final variable is the final or fixed values. And it cannot be changed or manipulated later on. 
The subclasses of the final class cannot be created.
When you create a method as final variable, it cannot be overridden. 
A variable can also be declared as final variable. 
And a variable that's has been declare as final but not initialize is known as blank variable.

5. Static Members in java: 
A static class is basically the same as a non-static class, 
but there is one difference: a static class cannot be instantiated. 
In other words, you cannot use the new operator to create a variable of the class type. 
a. Static members can be accessed without creating an object.
b. Static methods cannot access non static members.
c. Non static methods can access static members.
d. Static methods do not have access to this keyword reference.

6. Constructors : Contructors are used to initialize the data members of the class.
We can create a contructor with a parameters or without a parameters.

7. Inheritance: Inheritance is used to implement a is-a relationship.
                Advantages: Code reusability, Overriding(Runtime Polymorphism).
                Types of inheritance:
                i.  Single Inheritance
                    Single Parent, Single Child
                ii. Multilevel Inheritance
                    Multi-level Classes
                iii.Heirarichal Inheritance
                    Single Parent, Multiple Childs
                iv. Multiple Inheritance
                    Multiple classes derived a single class.
                    Not allowed in java.

8. Super Keyword: It is used to call parent class contructor.
                  It is an optional keyword and it can be used to remove an ambiguity if the variable is declared twice 
                  so only for calling a parent's members.
                  
9. Polymorphism : Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance. 
                  There are two types of polymorphism in Java: Compile time polymorphism and Run time polymorphism in java.
                  Compile-time Polymorphism allows the incorporation of multiple methods within a class.
                  The methods use the same name but the parameter varies. 
                  This polymorphism is resolved during the compiler time and it represents the static polymorphism.
                  Dynamic polymorphism in Java refers to the process when a call to an overridden process is resolved at the run time.
                  The reference variable of a superclass calls the overridden method. Understanding the process of Upcasting is crucial 
                  before understanding the concept of run time polymorphism. Upcasting refers to the process
                  where an object of the child class is referred to by a reference variable of the superclass.
                  
The program 

class Bike{  
 void run(){System.out.println(“running”);} 
}  
class Splendor extends Bike{  
  void run(){System.out.println(“walking safely with 30km”);}  
    public static void main(String args[]){  
    Bike b = new Splendor();//upcasting  
    b.run();  
  }  
}  

Output: walking safely with 60km
                  
10. Abstraction: Abstraction is one of the principle of OOPs 
where the abstracted implementation is been provided in the driver classes but the actual implementations are given in the derived class.
It the process of hiding certain details and showing only the essential information. Abstract class can implemented using abstract keyword.
Ex: A car is viewed as a car rather than its individual components.
It can be performed using two techniques:
i. Abstraction 
ii. Interfaces
Point to remember about abstraction:
i. No instances
ii. References can be there
iii. Can have contructor
iv. A class can be abstract without any abstract method
v. We can have static methods
vi. If a class has one abstract method then the class must be made abstract.
v. If a subclass does not implement all abstract methods, then the derived class mjust also be abstract.

Interface : It is an another way to implement abstraction. 
We can create an abstraction using interface using interface keyword.
The Java compiler adds public and abstract keywords before the interface method. 
Moreover, it adds public, static and final keywords before data members.

Abstract Class V/s Interfaces
Similarities: 
i. Used to acheive abstraction.
ii. Instances cannot be created.
iii. Reference can be created.
Differences: https://www.javatpoint.com/difference-between-abstract-class-and-interface

Following is the Condition where to implement Abstract classes and when to implement interfaces:
1. When we have a is-a relationship like various shapes or various vehicles so at that point we implement abstract classses.
2. When we need a functionality to be implemented by possibly unrelated classes. (multiple implementations/ multiple inheritance).

   
